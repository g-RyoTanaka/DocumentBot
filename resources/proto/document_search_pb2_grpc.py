# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import document_search_pb2 as document__search__pb2


class DocumentSearchServiceStub(object):
    """サービスとRPCメソッド定義
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchContents = channel.unary_unary(
                '/document_search.DocumentSearchService/SearchContents',
                request_serializer=document__search__pb2.SearchQuery.SerializeToString,
                response_deserializer=document__search__pb2.SearchContentResult.FromString,
                )
        self.SearchNumber = channel.unary_unary(
                '/document_search.DocumentSearchService/SearchNumber',
                request_serializer=document__search__pb2.SearchQuery.SerializeToString,
                response_deserializer=document__search__pb2.SearchNumResult.FromString,
                )


class DocumentSearchServiceServicer(object):
    """サービスとRPCメソッド定義
    """

    def SearchContents(self, request, context):
        """クエリ検索とその検索結果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchNumber(self, request, context):
        """クエリ検索とその検索件数結果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocumentSearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchContents': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchContents,
                    request_deserializer=document__search__pb2.SearchQuery.FromString,
                    response_serializer=document__search__pb2.SearchContentResult.SerializeToString,
            ),
            'SearchNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchNumber,
                    request_deserializer=document__search__pb2.SearchQuery.FromString,
                    response_serializer=document__search__pb2.SearchNumResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'document_search.DocumentSearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DocumentSearchService(object):
    """サービスとRPCメソッド定義
    """

    @staticmethod
    def SearchContents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/document_search.DocumentSearchService/SearchContents',
            document__search__pb2.SearchQuery.SerializeToString,
            document__search__pb2.SearchContentResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/document_search.DocumentSearchService/SearchNumber',
            document__search__pb2.SearchQuery.SerializeToString,
            document__search__pb2.SearchNumResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
